import { OrdersEntity } from '../models/order.entity';
import { Repository } from 'typeorm';
import { UsersService } from 'src/users/users.service';
import { ItemsService } from 'src/items/services/items.service';
import { MySubscriptionsEntity } from '../models/mysubscriptions.entity';
import { SubscriptionsService } from './subscription.service';
import { ZoneMappingEntity } from '../models/zoneMapping.entity';
import { NotificationsEntity } from '../models/notifications.entity';
import { S3 } from 'aws-sdk';
import { ConfigService } from '@nestjs/config';
import { PaymentsEntity } from '../models/payments.entity';
import { RefundsEntity } from '../models/refund.entity';
import { OrderLocationsEntity } from '../models/orderLocations.entity';
export declare class OrdersService {
    private orderModel;
    private mySubModel;
    private zoneMapRepo;
    private notiRepo;
    private paymentRepo;
    private refundRepo;
    private ordLocRepo;
    private userService;
    private itemSerivce;
    private subSerivce;
    private configService;
    constructor(orderModel: Repository<OrdersEntity>, mySubModel: Repository<MySubscriptionsEntity>, zoneMapRepo: Repository<ZoneMappingEntity>, notiRepo: Repository<NotificationsEntity>, paymentRepo: Repository<PaymentsEntity>, refundRepo: Repository<RefundsEntity>, ordLocRepo: Repository<OrderLocationsEntity>, userService: UsersService, itemSerivce: ItemsService, subSerivce: SubscriptionsService, configService: ConfigService);
    findOne(id: number): Promise<OrdersEntity>;
    list(reqBody: any): Promise<any>;
    getOrder(reqBody: any): Promise<any>;
    addOrder(reqBody: any): Promise<any>;
    getOrderDates(startDate: any, noOrders: any, planDays: any): Promise<any>;
    generatePDFfromHTML(order: any): Promise<any>;
    uploadS3(params: any): Promise<unknown>;
    getS3(): S3;
    addUserOrder(reqBody: any): Promise<any>;
    updateOrderStatus(reqBody: any): Promise<any>;
    updateOrder(reqBody: any): Promise<any>;
    updateMySubscription(reqBody: any): Promise<any>;
    deleteMySubscription(reqBody: any): Promise<any>;
    getTodayOrdersReport(reqBody: any): Promise<any>;
    uploadDeliveryImage(file: any, reqBody: any): Promise<any>;
    uploadFileS3(file: any, bucket: any, name: any): Promise<unknown>;
    deliveryOrders(reqBody: any): Promise<any>;
}
